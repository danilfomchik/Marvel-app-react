{"version":3,"file":"static/js/110.42d9fdc2.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundery.js","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charItem/CharItem.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/pages/MainPage.js","hooks/useAllData.js","hooks/useSingleData.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import { Component } from \"react\";\r\n\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundery extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch = (error, errorInfo) => {\r\n        console.log(error, errorInfo);\r\n\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error){\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundery;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        <img src={img} style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} alt='This is error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./randomChar.scss\";\n\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n\n        // const timerId = setInterval(updateChar, 5000);\n\n        // return () => {\n        //     clearInterval(timerId);\n        // };\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        getCharacter(id).then(onCharLoaded);\n    };\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!\n                    <br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">Or choose another one</p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img\n                    src={mjolnir}\n                    alt=\"mjolnir\"\n                    className=\"randomchar__decoration\"\n                />\n            </div>\n        </div>\n    );\n};\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n\n    let imgStyle = { objectFit: \"cover\" };\n\n    if (\n        thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n    ) {\n        imgStyle = { objectFit: \"contain\" };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt={name}\n                className=\"randomchar__img\"\n                style={imgStyle}\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a\n                        href={homepage}\n                        className=\"button button__main\"\n                        target={\"_blank\"}\n                        rel=\"noreferrer\"\n                    >\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a\n                        href={wiki}\n                        className=\"button button__secondary\"\n                        target={\"_blank\"}\n                        rel=\"noreferrer\"\n                    >\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;\n","import \"./CharItem.scss\";\r\n\r\nconst CharItem = (props) => {\r\n    const { name, thumbnail, id, itemRef, updateCharId, setActiveCard } = props;\r\n    let availableImage = thumbnail.includes(\"image_not_available\");\r\n\r\n    return (\r\n        <>\r\n            <li\r\n                className=\"char__item\"\r\n                tabIndex={0}\r\n                onClick={() => {\r\n                    updateCharId();\r\n                    setActiveCard(id);\r\n                }}\r\n                onKeyPress={(e) => {\r\n                    if (e.key === \" \" || e.key === \"Enter\") {\r\n                        updateCharId();\r\n                        setActiveCard(id);\r\n                    }\r\n                }}\r\n                data-id={id}\r\n                ref={itemRef}\r\n            >\r\n                <img\r\n                    src={thumbnail}\r\n                    alt={name}\r\n                    style={availableImage ? { objectFit: \"contain\" } : null}\r\n                />\r\n                <div className=\"char__name\">{name}</div>\r\n            </li>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CharItem;\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport useAllData from \"../../hooks/useAllData\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport PropTypes from \"prop-types\";\n\nimport CharItem from \"../charItem/CharItem\";\n\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n    const { loading, error, getAllCharacters } = useMarvelService();\n    const { data, newItemLoading, offset, charEnded, updateDataList } =\n        useAllData(getAllCharacters);\n\n    useEffect(() => {\n        updateDataList(offset, true);\n        // window.addEventListener(\"scroll\", onScrollPage);\n\n        // return () => {\n        //     window.removeEventListener(\"scroll\", onScrollPage);\n        // };\n    }, []);\n\n    const onScrollPage = () => {\n        // Нам потребуется знать высоту документа и высоту экрана:\n        const height = document.body.offsetHeight;\n        const screenHeight = window.innerHeight;\n\n        // // Записываем, сколько пикселей пользователь уже проскроллил:\n        const scrolled = window.scrollY;\n\n        // // Обозначим порог, по приближении к которому\n        // // будем вызывать какое-то действие.\n        // // В нашем случае — четверть экрана до конца страницы:\n        const threshold = height - (screenHeight / 16 - 30);\n\n        // // Отслеживаем, где находится низ экрана относительно страницы:\n        const position = scrolled + screenHeight;\n\n        // Если мы пересекли полосу-порог и новые элементы ещё не подгружаются, вызываем нужное действие.\n        if (position >= threshold && !newItemLoading) {\n            updateDataList(offset, true);\n        }\n    };\n\n    const itemRefs = useRef([]);\n\n    const setActiveCharCard = (id) => {\n        itemRefs.current.forEach((card) => {\n            card.classList.remove(\"char__item_selected\");\n\n            if (+card.getAttribute(\"data-id\") === id) {\n                card.classList.add(\"char__item_selected\");\n            }\n        });\n    };\n\n    const renderCards = (data) => {\n        const { updateCharId } = props;\n\n        const elements = data.map((char, i) => {\n            return (\n                <CharItem\n                    setActiveCard={setActiveCharCard}\n                    itemRef={(el) => (itemRefs.current[i] = el)}\n                    key={char.id}\n                    id={char.id}\n                    name={char.name}\n                    thumbnail={char.thumbnail}\n                    updateCharId={() => updateCharId(char.id)}\n                />\n            );\n        });\n\n        return <ul className=\"char__grid\">{elements}</ul>;\n    };\n\n    const cards = renderCards(data);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {cards}\n            <button\n                className=\"button button__main button__long\"\n                onClick={() => updateDataList(offset)}\n                disabled={newItemLoading}\n                style={{ display: charEnded ? \"none\" : \"block\" }}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n};\n\nCharList.propTypes = {\n    updateCharId: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport useSingleData from \"../../hooks/useSingleData\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n    const { loading, error, getCharacter } = useMarvelService();\n    const { dataInfo } = useSingleData(props.charId, getCharacter);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const skeleton = !(loading || error || dataInfo) ? <Skeleton /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !dataInfo) ? (\n        <View char={dataInfo} />\n    ) : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {content}\n            {spinner}\n            {errorMessage}\n        </div>\n    );\n};\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    const availableImage = thumbnail.includes(\"image_not_available\");\n\n    const comicsList = comics.map((item, index) => {\n        return (\n            <Link\n                to={`/comics/${item.resourceURI.match(/\\d+/g)[1]}`}\n                key={index}\n                className=\"char__comics-item\"\n            >\n                <li>{item.name}</li>\n            </Link>\n        );\n    });\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img\n                    src={thumbnail}\n                    alt={name}\n                    style={availableImage ? { objectFit: \"contain\" } : null}\n                />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a\n                            href={homepage}\n                            className=\"button button__main\"\n                            target={\"_blank\"}\n                            rel=\"noreferrer\"\n                        >\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a\n                            href={wiki}\n                            className=\"button button__secondary\"\n                            target={\"_blank\"}\n                            rel=\"noreferrer\"\n                        >\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comicsList.length > 0\n                    ? comicsList.filter((item, i) => (i < 10 ? item : null))\n                    : \"Nothing to show...\"}\n            </ul>\n        </>\n    );\n};\n\nexport default CharInfo;\n","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundery from \"../errorBoundary/ErrorBoundery\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n    const [charId, setCharId] = useState(null);\r\n\r\n    const updateCharId = (charId) => {\r\n        setCharId(charId);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundery>\r\n                <RandomChar />\r\n            </ErrorBoundery>\r\n\r\n            <div className=\"char__content\">\r\n                <ErrorBoundery>\r\n                    <CharList updateCharId={updateCharId} charId={charId} />\r\n                </ErrorBoundery>\r\n\r\n                <ErrorBoundery>\r\n                    <CharInfo charId={charId} />\r\n                </ErrorBoundery>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useCallback, useState } from \"react\";\r\n\r\nconst useAllData = (getDataFunc) => {\r\n    const [data, setData] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const updateDataList = useCallback(\r\n        (offset, initial) => {\r\n            initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\r\n            getDataFunc(offset).then(onDataLoaded);\r\n        },\r\n        [offset]\r\n    );\r\n\r\n    const onDataLoaded = (newData) => {\r\n        let ended = false;\r\n        if (newData.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setData((prevData) => [...prevData, ...newData]);\r\n        setNewItemLoading(false);\r\n        setOffset((offset) => offset + 9);\r\n        setCharEnded(ended);\r\n    };\r\n\r\n    return {\r\n        data,\r\n        newItemLoading,\r\n        offset,\r\n        charEnded,\r\n        updateDataList,\r\n    };\r\n};\r\n\r\nexport default useAllData;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../services/MarvelService\";\r\n\r\nconst useSingleData = (id, getDataFunc) => {\r\n    const [dataInfo, setDataInfo] = useState(null);\r\n    const { clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateCharInfo();\r\n    }, [id]);\r\n\r\n    const updateCharInfo = () => {\r\n        if (!id) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n\r\n        getDataFunc(id).then(onCharLoaded);\r\n    };\r\n\r\n    const onCharLoaded = (dataInfo) => {\r\n        setDataInfo(dataInfo);\r\n    };\r\n\r\n    return { dataInfo };\r\n};\r\n\r\nexport default useSingleData;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n    const _apiKey = \"apikey=d047076055a53a4dbf6afb64cf4e109b\";\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n        );\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?limit=12&offset=${offset}&${_apiKey}`\r\n        );\r\n\r\n        return res.data.results.map(_transformComic);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n        return _transformComic(res.data.results[0]);\r\n    };\r\n\r\n    const _transformComic = (comic) => {\r\n        let description = comic.description;\r\n\r\n        if (!description) {\r\n            description = \"There is no description for this comic...\";\r\n        }\r\n\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: description,\r\n            pages: comic.pageCount,\r\n            thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n            language: comic.textObjects.language || \"en-us\",\r\n            price: comic.prices[0].price,\r\n            homepage: comic.urls[0].url,\r\n        };\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        let description = char.description;\r\n\r\n        if (description.length === 0) {\r\n            description = \"There is no description for this character...\";\r\n        } else if (char.description.length >= 180) {\r\n            description = description.substring(0, 180) + \" ...\";\r\n        }\r\n\r\n        return {\r\n            comics: char.comics.items,\r\n            id: char.id,\r\n            name: char.name,\r\n            description: description,\r\n            thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n        };\r\n    };\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n        clearError,\r\n    };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(\r\n        async (\r\n            url,\r\n            method = \"GET\",\r\n            body = null,\r\n            headers = { \"Content-Type\": \"application/json\" }\r\n        ) => {\r\n            setLoading(true);\r\n\r\n            try {\r\n                const response = await fetch(url, { method, body, headers });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\r\n                        `Could not fetch ${url}, status: ${response.status}`\r\n                    );\r\n                }\r\n\r\n                const data = await response.json();\r\n\r\n                setLoading(false);\r\n\r\n                return data;\r\n            } catch (e) {\r\n                setLoading(false);\r\n                setError(e.message);\r\n\r\n                throw e;\r\n            }\r\n        },\r\n        []\r\n    );\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return { loading, request, error, clearError };\r\n};\r\n"],"names":["ErrorBoundery","state","error","componentDidCatch","errorInfo","console","log","setState","this","props","children","Component","src","img","style","display","width","height","objectFit","margin","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","href","target","rel","useState","setChar","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","itemRef","updateCharId","setActiveCard","availableImage","includes","tabIndex","onKeyPress","e","key","ref","getAllCharacters","useAllData","data","newItemLoading","offset","charEnded","updateDataList","itemRefs","useRef","setActiveCharCard","current","forEach","card","classList","remove","getAttribute","add","cards","elements","map","i","el","renderCards","disabled","comics","comicsList","item","index","to","resourceURI","match","length","filter","dataInfo","useSingleData","charId","skeleton","setCharId","decoration","getDataFunc","setData","setNewItemLoading","setOffset","setCharEnded","useCallback","initial","onDataLoaded","newData","ended","prevData","setDataInfo","updateCharInfo","setLoading","setError","request","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","_baseOffset","res","results","_transformCharacter","getAllComics","_transformComic","getComic","comic","title","pages","pageCount","path","extension","language","textObjects","price","prices","urls","substring","items"],"sourceRoot":""}